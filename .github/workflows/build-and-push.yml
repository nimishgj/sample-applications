name: Build and Push Docker Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
    paths:
      - 'go/gin/**'
      - 'java/springboot/**'
      - 'nodejs/express/**'
      - 'python/fastapi/**'
      - 'php/laravel/**'
      - '.github/workflows/build-and-push.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'go/gin/**'
      - 'java/springboot/**'
      - 'nodejs/express/**'
      - 'python/fastapi/**'
      - 'php/laravel/**'
      - '.github/workflows/build-and-push.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      go: ${{ steps.changes.outputs.go }}
      java: ${{ steps.changes.outputs.java }}
      nodejs: ${{ steps.changes.outputs.nodejs }}
      python: ${{ steps.changes.outputs.python }}
      php: ${{ steps.changes.outputs.php }}
      latest_tag: ${{ steps.latest_tag.outputs.tag }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get latest release tag
      id: latest_tag
      run: |
        # Get the latest tag (most recent release)
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$LATEST_TAG" ]; then
          echo "tag=v1.0.0" >> $GITHUB_OUTPUT
          echo "No tags found, defaulting to v1.0.0"
        else
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag found: $LATEST_TAG"
        fi
    
    - name: Check for changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          go:
            - 'go/gin/**'
          java:
            - 'java/springboot/**'
          nodejs:
            - 'nodejs/express/**'
          python:
            - 'python/fastapi/**'
          php:
            - 'php/laravel/**'

  build-go:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.go == 'true' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/nimishgj/hello-gin
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ needs.changes.outputs.latest_tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
          type=sha,prefix={{branch}}-

    - name: Build and push Go/Gin image
      uses: docker/build-push-action@v5
      with:
        context: ./go/gin
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  build-java:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.java == 'true' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/nimishgj/hello-springboot
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ needs.changes.outputs.latest_tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
          type=sha,prefix={{branch}}-

    - name: Build and push Java/SpringBoot image
      uses: docker/build-push-action@v5
      with:
        context: ./java/springboot
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  build-nodejs:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.nodejs == 'true' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/nimishgj/hello-express
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ needs.changes.outputs.latest_tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
          type=sha,prefix={{branch}}-

    - name: Build and push Node.js/Express image
      uses: docker/build-push-action@v5
      with:
        context: ./nodejs/express
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  build-python:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.python == 'true' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/nimishgj/hello-fastapi
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ needs.changes.outputs.latest_tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
          type=sha,prefix={{branch}}-

    - name: Build and push Python/FastAPI image
      uses: docker/build-push-action@v5
      with:
        context: ./python/fastapi
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  build-php:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.php == 'true' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/nimishgj/hello-laravel
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ needs.changes.outputs.latest_tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
          type=sha,prefix={{branch}}-

    - name: Build and push PHP/Laravel image
      uses: docker/build-push-action@v5
      with:
        context: ./php/laravel
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  summary:
    runs-on: ubuntu-latest
    needs: [changes, build-go, build-java, build-nodejs, build-python, build-php]
    if: always()
    steps:
    - name: Build Summary
      run: |
        echo "## Docker Images Built and Pushed ðŸš€" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Information:" >> $GITHUB_STEP_SUMMARY
        echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- Latest Release Tag: ${{ needs.changes.outputs.latest_tag }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Changes Detected:" >> $GITHUB_STEP_SUMMARY
        echo "- Go/Gin: ${{ needs.changes.outputs.go }}" >> $GITHUB_STEP_SUMMARY
        echo "- Java/SpringBoot: ${{ needs.changes.outputs.java }}" >> $GITHUB_STEP_SUMMARY
        echo "- Node.js/Express: ${{ needs.changes.outputs.nodejs }}" >> $GITHUB_STEP_SUMMARY
        echo "- Python/FastAPI: ${{ needs.changes.outputs.python }}" >> $GITHUB_STEP_SUMMARY
        echo "- PHP/Laravel: ${{ needs.changes.outputs.php }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Application | Image | Changes | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------------|-------|---------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Go/Gin | \`ghcr.io/nimishgj/hello-gin:latest\` | ${{ needs.changes.outputs.go }} | ${{ needs.build-go.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Java/SpringBoot | \`ghcr.io/nimishgj/hello-springboot:latest\` | ${{ needs.changes.outputs.java }} | ${{ needs.build-java.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Node.js/Express | \`ghcr.io/nimishgj/hello-express:latest\` | ${{ needs.changes.outputs.nodejs }} | ${{ needs.build-nodejs.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Python/FastAPI | \`ghcr.io/nimishgj/hello-fastapi:latest\` | ${{ needs.changes.outputs.python }} | ${{ needs.build-python.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| PHP/Laravel | \`ghcr.io/nimishgj/hello-laravel:latest\` | ${{ needs.changes.outputs.php }} | ${{ needs.build-php.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Usage Examples" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Pull and run any built image" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.changes.outputs.go }}" == "true" ]]; then
          echo "docker run -p 8080:8080 ghcr.io/nimishgj/hello-gin:latest" >> $GITHUB_STEP_SUMMARY
        fi
        if [[ "${{ needs.changes.outputs.java }}" == "true" ]]; then
          echo "docker run -p 8080:8080 ghcr.io/nimishgj/hello-springboot:latest" >> $GITHUB_STEP_SUMMARY
        fi
        if [[ "${{ needs.changes.outputs.nodejs }}" == "true" ]]; then
          echo "docker run -p 8080:8080 ghcr.io/nimishgj/hello-express:latest" >> $GITHUB_STEP_SUMMARY
        fi
        if [[ "${{ needs.changes.outputs.python }}" == "true" ]]; then
          echo "docker run -p 8080:8080 ghcr.io/nimishgj/hello-fastapi:latest" >> $GITHUB_STEP_SUMMARY
        fi
        if [[ "${{ needs.changes.outputs.php }}" == "true" ]]; then
          echo "docker run -p 8080:80 ghcr.io/nimishgj/hello-laravel:latest" >> $GITHUB_STEP_SUMMARY
        fi
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY